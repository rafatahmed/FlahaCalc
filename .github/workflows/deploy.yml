# @format

name: Deploy to DigitalOcean

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install
          cd EVAPOTRAN/server
          npm install

      - name: Build application
        run: npm run build

      - name: Ensure assets exist
        run: |
          mkdir -p public/img
          # Create logo if it doesn't exist
          if [ ! -f "public/img/Flaha_logo.svg" ]; then
            cat > public/img/Flaha_logo.svg << 'EOF'
          <svg xmlns="http://www.w3.org/2000/svg" width="200" height="60" viewBox="0 0 200 60">
            <text x="10" y="40" font-family="Arial" font-size="30" font-weight="bold" fill="#3a7e3a">FLAHA</text>
          </svg>
          EOF
          fi
          # Create agriculture illustration if it doesn't exist
          if [ ! -f "public/img/agriculture-illustration.svg" ]; then
            cat > public/img/agriculture-illustration.svg << 'EOF'
          <svg xmlns="http://www.w3.org/2000/svg" width="300" height="200" viewBox="0 0 300 200">
            <rect x="50" y="150" width="200" height="20" fill="#8B4513"/>
            <path d="M150,50 L120,150 L180,150 Z" fill="#3a7e3a"/>
            <path d="M100,80 L80,150 L120,150 Z" fill="#3a7e3a"/>
            <path d="M200,80 L180,150 L220,150 Z" fill="#3a7e3a"/>
          </svg>
          EOF
          fi

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: 207.154.202.6
          username: root
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            # Create application directory if it doesn't exist
            mkdir -p /var/www/flahacalc/public
            mkdir -p /var/www/flahacalc/EVAPOTRAN/server
            
            # Install dependencies
            cd /var/www/flahacalc/EVAPOTRAN/server
            npm install dotenv express cors axios
            
            # Make all scripts executable
            cd /var/www/flahacalc
            find scripts -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
            
            # Update Nginx configuration
            echo "Updating Nginx configuration..."
            cp /etc/nginx/sites-available/flahacalc /etc/nginx/sites-available/flahacalc.bak.$(date +%Y%m%d%H%M%S) 2>/dev/null || true
            
            # Create Nginx configuration for evapotran.flaha.org
            cat > /etc/nginx/sites-available/evapotran.flaha.org << 'EOF'
            server {
                listen 80;
                server_name evapotran.flaha.org;
                
                # Redirect HTTP to HTTPS
                return 301 https://$host$request_uri;
            }

            server {
                listen 443 ssl;
                server_name evapotran.flaha.org;

                ssl_certificate /etc/letsencrypt/live/evapotran.flaha.org/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/evapotran.flaha.org/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
                ssl_session_timeout 1d;
                ssl_session_cache shared:SSL:10m;
                ssl_session_tickets off;
                ssl_stapling on;
                ssl_stapling_verify on;
                add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
                add_header X-Frame-Options SAMEORIGIN;
                add_header X-Content-Type-Options nosniff;
                add_header X-XSS-Protection "1; mode=block";

                # Root directory for the EVAPOTRAN application
                root /var/www/flahacalc/EVAPOTRAN;
                index index.html;

                # API endpoints
                location /api/ {
                    proxy_pass http://localhost:3000/api/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }

                # SPA routing
                location / {
                    try_files $uri $uri.html $uri/ /index.html;
                }
                
                # Status page for monitoring
                location /nginx_status {
                    stub_status on;
                    access_log off;
                    allow 127.0.0.1;
                    deny all;
                }
                
                # Configure access and error logs for subdomain
                access_log /var/log/nginx/evapotran.flaha.org-access.log;
                error_log /var/log/nginx/evapotran.flaha.org-error.log;
            }
            EOF
            
            # Create log files if they don't exist
            touch /var/log/nginx/evapotran.flaha.org-access.log
            touch /var/log/nginx/evapotran.flaha.org-error.log
            chown www-data:www-data /var/log/nginx/evapotran.flaha.org-*.log
            
            # Enable the site
            ln -sf /etc/nginx/sites-available/evapotran.flaha.org /etc/nginx/sites-enabled/
            
            # Test and reload Nginx
            nginx -t && systemctl reload nginx
            
            # Create .env file if it doesn't exist
            if [ ! -f "/var/www/flahacalc/EVAPOTRAN/server/.env" ]; then
              echo "Creating .env file..."
              cat > /var/www/flahacalc/EVAPOTRAN/server/.env << 'ENVEOF'
            # OpenWeatherMap API Key
            WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}

            # Server port (default: 3000)
            PORT=3000
            ENVEOF
            fi
            
            # Restart server
            cd /var/www/flahacalc/EVAPOTRAN/server
            pm2 restart flahacalc-server || pm2 start server.js --name flahacalc-server
            pm2 save
            
            echo "Deployment completed successfully!"

      - name: Deploy EVAPOTRAN files via rsync
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avz --delete
          path: ./EVAPOTRAN/
          remote_path: /var/www/flahacalc/EVAPOTRAN/
          remote_host: 207.154.202.6
          remote_user: root
          remote_key: ${{ secrets.DROPLET_SSH_KEY }}

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: 207.154.202.6
          username: root
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            # Verify Nginx configuration
            echo "Verifying Nginx configuration..."
            if nginx -t 2>&1 | grep -q "successful"; then
              echo "‚úÖ Nginx configuration is valid"
            else
              echo "‚ùå Nginx configuration is invalid"
              exit 1
            fi
            
            # Verify server is running
            echo "Verifying server is running..."
            if pm2 list | grep -q "flahacalc-server"; then
              echo "‚úÖ Server is running"
            else
              echo "‚ùå Server is not running"
              exit 1
            fi
            
            # Test API endpoint
            echo "Testing API endpoint..."
            RESPONSE=$(curl -s http://localhost:3000/api/test)
            echo "API response: $RESPONSE"
            if echo "$RESPONSE" | grep -q "status"; then
              echo "‚úÖ API endpoint is working"
            else
              echo "‚ùå API endpoint is not working"
              exit 1
            fi
            
            # Test weather API endpoint
            echo "Testing weather API endpoint..."
            WEATHER_RESPONSE=$(curl -s "http://localhost:3000/api/weather?q=London")
            if echo "$WEATHER_RESPONSE" | grep -q "Invalid API key"; then
              echo "‚ö†Ô∏è Weather API needs a valid API key"
            elif echo "$WEATHER_RESPONSE" | grep -q "name"; then
              echo "‚úÖ Weather API is working"
            else
              echo "‚ùå Weather API is not working"
              echo "Response: $WEATHER_RESPONSE"
            fi
            
            echo "Verification completed successfully!"

      - name: Notify on success
        if: success()
        run: |
          echo "Deployment completed successfully!"
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚úÖ *DEPLOYMENT SUCCESSFUL* ‚úÖ\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Deployed by:* ${{ github.actor }}\n*Time:* $(date)"}' \
          ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed!"
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üö® *DEPLOYMENT FAILED* üö®\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Deployed by:* ${{ github.actor }}\n*Time:* $(date)"}' \
          ${{ secrets.SLACK_WEBHOOK}}
